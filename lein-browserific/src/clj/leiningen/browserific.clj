(ns leiningen.browserific
  (:require [leiningen.help :as lhelp]
            [leiningen.core.main :as lmain]
            [clojure.java.io :as io]
            [me.raynes.fs :as fs]
            [browserific.config :as conf]
            [browserific.parser :as parse]
            [browserific.helpers.utils :as u :refer [yellow-text red-text]]
            [browserific.config.server :as server]
            [browserific.builds :as builds]
            [clojure.java.browse :as b]
            [clojure.java.shell :as sh])
  (:refer-clojure :exclude [compile])
  (:import java.io.File))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Helper fns

(defn- write-dirs []
  (doseq [plat #{"chrome" "firefox" "opera" "safari" "amazon-fire"
                 "android" "blackberry" "firefoxos" "ios" "ubuntu"
                 "wp7" "wp8" "tizen" "linux32" "linux64"
                 "osx32" "osx64" "windows"}]
    (let [loc (File. (str "intermediate/" plat))]
      (.mkdirs (File. (str loc "/content")))
      (.mkdirs (File. (str loc "/background"))))))

(defn get-source-files
  "Finds any clojure or clojurescript source files
   in a directory. Returns a seq strings."
  [dir]
  (filter #(re-find #"^(?:(?!#).)*\.(clj|cljs)$" (str %))
        (file-seq (File. dir))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Leiningen fns

(defn- build
  "Write lein-cljsbuilds for all relevant platforms"
  ([]
     (lmain/info (yellow-text "Writing a new lein-cljsbuild configuration.\n"))
     (lmain/warn (red-text "Warning: no draft platform specified but building config anyway.\n"))
     (builds/generate-builds))
  ([custom]
     (lmain/info (yellow-text "Writing a new lein-cljsbuild configuration.\n"))
     (if-not (u/member? custom u/platforms) (lmain/abort (red-text (str "Browserific Error: " custom " is not a valid platform.\n\nOptions are:
" u/platforms))))
     (builds/generate-builds custom)))

(defn- compile
  "Compile the browserific files"
  [project]
  (lmain/info (yellow-text "Compiling Browserific files.\n"))
  (fs/delete-dir "intermediate")
  (write-dirs)
  (conf/build-configs)
  (let [src (or (get-in project [:browserific :source-paths]) "src")
        files (vec (get-source-files src))]
    (parse/parse-files files)))


;; FIXME: should this clean each lein-cjlsbuild file too?
(defn- clean
  "Remove files previously generated by browserific"
  []
  (lmain/info (yellow-text "Deleting files generated by Browserific.\n"))
  (fs/delete-dir "intermediate")
  (fs/delete "builds.clj"))

(defn- sample
  "Shows a sample config.edn for either extension, mobile, or desktop.
   If no platform is specified, a sample with all three platforms will be
   shown."
  [& type]
  (case (first type)
    "extension" (-> (io/resource "samples/extension-sample.edn") slurp lmain/info)
    "mobile" (-> (io/resource "samples/mobile-sample.edn") slurp lmain/info)
    "desktop" (-> (io/resource "samples/desktop-sample.edn") slurp lmain/info)
    (-> (io/resource "samples/all-samples.edn") slurp lmain/info)))

(defn- config
  "Launch a server over port 50000 that has a GUI for building a config.edn file"
  []
  (lmain/info (yellow-text "Starting a new browserific config server."))
  (server/config-server))

;; FIXME: should load the webpage without needing to manually reload!
(comment (b/browse-url "http://localhost:50000"))

(defn browserific
  "Run lein-browserific"
  {:help-arglists '([build compile clean sample config])
   :subtasks [#'build #'compile #'clean #'sample #'config]}
  ([project]
     (lmain/info
      (lhelp/help-for "browserific"))
     (lmain/abort))
  ([project subtask & args]
     (case subtask
       "build" (if args (apply build args) (build))
       "compile" (compile project)
       "clean" (clean)
       "sample" (apply sample args)
       "config" (config)
       (do
         (lmain/warn (red-text (str "Browserific Error: Subtask " subtask " not found."))
          (lhelp/subtask-help-for *ns* #'browserific))
         (lmain/abort)))))
